snippet namespace "CPP Scoped namespace with comment" b
namespace ${1:namespace} {
${VISUAL}
} // namespace $1
endsnippet


snippet nested_namespace "CPP nested namespace with comment" b
// namespace ${1:namespace}
`!p
tokens = t[1].split(' ')
for tok in tokens:
  snip.rv += snip.mkline("namespace {} {{\n".format(tok))
snip.rv += '\n'
snip.rv += snip.v.text
for tok in reversed(tokens):
  snip.rv += snip.mkline("\n}} // namespace {}".format(tok))
`
endsnippet


snippet main "Zoox main with GFlags, GLog, and base::init" b
// `!p snip.rv = snip.basename`
//
// TODO
//

/*
package(default_visibility = ["//visibility:public"])

cc_binary(
    name = "`!p snip.rv = snip.basename`",
    srcs = [
        "`!p snip.rv = snip.fn`",
    ],
    deps = [
        "//base/initialization:init_zoox",
        "//third_party/gflags",
        "//third_party/glog",
    ],
)
*/

#include <gflags/gflags.h>
#include <glog/logging.h>

#include "base/initialization/init_zoox.h"

namespace zoox {
int `!p snip.rv = snip.basename`_main() {
  // Do something...
  return EXIT_SUCCESS;
}
} // namespace zoox

int main(int argc, char* argv[]) {
  zoox::base::init(argc, argv);
  return zoox::`!p snip.rv = snip.basename`_main();
}
endsnippet


snippet test "Zoox test skeleton with gtest_main" b
#include <gtest/gtest.h>

/*
package(default_visibility = ["//visibility:public"])

cc_test(
    name = "`!p snip.rv = snip.basename`",
    srcs = [
        "`!p snip.rv = snip.fn`",
    ],
    deps = [
        "//base/test/gtest:gtest_main",
    ],
)
*/

TEST(Test`!p
import inflection
snip.rv = inflection.camelize(snip.basename, uppercase_first_letter=True)
`, works) {
  EXPECT_TRUE(false);
}
endsnippet
