autocmd BufRead,BufNewFile *.launch setfiletype xml

let mapleader=' '
set ttimeoutlen=500


" tab navigation like firefox
nnoremap <C-p> :bprevious<CR>
nnoremap <C-n> :bnext<CR>
"inoremap <C-p> <Esc>:bprevious<CR>i
"inoremap <C-n> <Esc>:bnext<CR>i

" Disable Ctrl+B
nnoremap <C-b> <Nop>

set splitbelow
set splitright

set switchbuf="useopen"

set path=./**

let rosworkspace = $ROS_WORKSPACE
if isdirectory(rosworkspace)
  let rospath=rosworkspace . 'src/**'
  set path+=rospath
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin('~/.bundles/')
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'vim-utils/vim-troll-stopper'
Plugin 'tpope/vim-fugitive'
Plugin 'evidens/vim-twig'
Plugin 'scrooloose/nerdtree'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'wikitopian/hardmode'
Plugin 'altercation/vim-colors-solarized'
Plugin 'groenewege/vim-less'
Plugin 'plasticboy/vim-markdown'
Plugin 'vim-scripts/DoxygenToolkit.vim'
Plugin 'nacitar/a.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-repeat'
Plugin 'PeterRincker/vim-argumentative'
Plugin 'vim-scripts/ReplaceWithRegister'
Plugin 'marczych/vim-lose'
Plugin 'cybrown-zoox/vim-pbtxt'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-scripts/openscad.vim'
Plugin 'rust-lang/rust.vim'
"Plugin 'vim-pandoc/vim-pandoc-syntax'
"let g:pandoc#syntax#conceal#use = 0
"augroup pandoc_syntax
  "au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
"augroup END

"Plugin 'vim-pandoc/vim-pandoc' " this thing sucks
"let g:pandoc#formatting#mode = 'h' " Hard-wrapping

" I have yet to use this in practice
"Plugin 'L9' "Required for FuzzyFinder
"Plugin 'FuzzyFinder'
"Plugin 'godlygeek/tabular'
"Plugin 'bling/vim-bufferline'

Plugin 'Peaches491/vim-glog-syntax'

Plugin 'tpope/vim-rhubarb'
let g:github_enterprise_urls = ['https://git.zooxlabs.com']

Plugin 'scrooloose/nerdcommenter'
let g:NERDCustomDelimiters = { 'openscad': { 'left': '//', } }

Plugin 'regedarek/ZoomWin'
nnoremap <silent> <leader>z :ZoomWin<CR>

Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight=1
let g:cpp_experimental_simple_template_highlight=1
let g:cpp_concepts_highlight=1

Plugin 'airblade/vim-gitgutter'
let g:gitgutter_async = 1
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

Plugin 'Chiel92/vim-autoformat'
let g:autoformat_verbosemode = 0
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatdef_clangformat = "'clang-format-3.6 -lines='.a:firstline.':'.a:lastline.' --assume-filename=\"'.expand('%:p').'\" -style=file'"
let g:formatdef_remark_markdown = '"remark --quiet --no-color --setting footnotes:true"'

Plugin 'rhysd/vim-clang-format'
let g:clang_format#command = 'clang-format-3.6'
let g:clang_format#detect_style_file = 1
"let g:clang_format#auto_format = 0

Plugin 'nathanaelkane/vim-indent-guides'
"set ts=4 sw=4 et
let g:indent_guides_start_level = 1
"let g:indent_guides_guide_size = 1
"let g:indent_guides_auto_colors = 0

Plugin 'easymotion/vim-easymotion'
let g:EasyMotion_leader_key=' m'

Plugin 'alvan/vim-closetag'
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.twig,*.launch,*.xml"

Plugin 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>
let g:Tlist_Auto_Open = 0

Plugin 'edkolev/tmuxline.vim'
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'c'    : '#(whoami)',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H'}

Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts   = 1
"let g:airline_theme             = 'tomorrow'
let g:airline_enable_branch     = 1
let g:airline_inactive_collapse = 1
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1

"Plugin 'ervandew/supertab'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsUsePythonVersion=2
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsEditSplit="vertical"

Plugin 'Valloric/YouCompleteMe'
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf_offline_ycm.py'
let g:ycm_collect_identifiers_from_tags_files = 0
let g:ycm_complete_in_strings = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_filetype_blacklist = { 'BUILD': 1 }

"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_autoclose_preview_window_after_insertion = 1

nnoremap <C-g> :YcmCompleter GoTo<CR>
inoremap <C-g> <Esc>:YcmCompleter GoTo<CR>i
nnoremap <Leader>f :YcmCompleter FixIt<CR>

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'
"

" This allows the user to generate compile commands for the current file with
" <C-y> key binding.
" Requires generate_compile_commands_from_filename_vim_plugin to be copied
" to ~/.vim/generate_compile_commands_from_filename.py
" And you'll want to use .ycm_extra_conf_offline_ycm.py as your ycm_extra_conf
function! GenerateCompileCommands()
  let l:fname=expand('%:p')
  if has("python")
    pyf ~/.ycm_compile_commands.py
  elseif has("python3")
    py3f ~/.ycm_compile_commands.py
  endif
  call input('Press any key to continue')
  YcmRestartServer
  redraw!
endfunction
map <C-y> :call GenerateCompileCommands()<cr>

Plugin 'wincent/command-t'
let g:CommandTFileScanner="git"
nmap <silent> <Leader>t <Plug>(CommandT)

"Plugin 'tpope/vim-commentary'
"Plugin 'jtratner/vim-flavored-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocommands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Reread configuration of Vim if .vimrc is saved.
" augroup VimRC
"   autocmd!
"   autocmd BufWritePost .vimrc so ~/.vimrc
" augroup END

augroup FileTypeAssociation
  autocmd!
  autocmd BufNewFile,BufRead *.ejs set filetype=html
  autocmd BufNewFile,BufRead *.make set filetype=make
  autocmd BufNewFile,BufRead *.impl set filetype=cpp
  autocmd BufNewFile,BufRead *.inl set filetype=cpp
  autocmd BufNewFile,BufRead *.bzl set filetype=python
  autocmd BufNewFile,BufRead BUILD set filetype=BUILD syntax=python
  autocmd BufNewFile,BufRead BUILD.* set filetype=BUILD syntax=python
  autocmd BufNewFile,BufRead *.py set filetype=python
  autocmd BufNewFile,BufRead *.twig set filetype=html
  autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
  autocmd BufNewFile,BufRead *.scad set filetype=openscad
augroup END

" Resize splits on window resize.
augroup AutoResizeSplits
  autocmd!
  autocmd VimResized * exe "normal! \<c-w>="
augroup END

autocmd FileType python setlocal foldmethod=indent smartindent shiftwidth=4 ts=4 et cinwords=if,elif,else,for,while,try,except,finally,def,classlk
autocmd Filetype openscad setlocal nocindent
autocmd Filetype openscad inoremap # X<c-h>#


" automatically start in hard mode. God help me.
"autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
"nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Themes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
"function! ReloadTheme(...)
"  let theme_fn=expand('~/.terminal_theme')
"  if filereadable(theme_fn)
"    let &background=readfile(theme_fn)[0]
"  else
"    if a:0 > 0:
"      set background=a:1
"    else
"      set background="dark"
"    endif
"  endif
"endfunction
"call ReloadTheme("dark")

" TODO: Figure out how to call a goddamned function
if !empty($TMUX)
  let tmuxline_fn=expand('~/.tmuxline')
  "call tmuxline#set_statusline()
  "call tmuxline#snapshot(tmuxline_fn, 1)
  "call TmuxlineSnapshot tmuxline_fn
endif

set t_Co=256                        " force vim to use 256 colors
"let g:solarized_termcolors=256      " use solarized 256 fallback
colorscheme solarized


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! NumbersOn()
  set relativenumber
  set number
endfunction

function! NumbersOff()
  set nonumber
  set norelativenumber
endfunction

function! RepeatAllMatches()
  :%s///gn
endfunction
command! RepeatAllMatches call RepeatAllMatches()

" Toggle relative line numbers
nnoremap <silent> <Leader>N :call NumbersOn()<cr>
nnoremap <silent> <Leader>n :call NumbersOff()<cr>

nnoremap <Leader>s :%s/\<<C-r><C-w>\>/

" Enable :w!! to save a file when you forgot to open with sudo
cmap w!! w !sudo tee % >/dev/null

command! -nargs=? -range Dec2hex call s:Dec2hex(<line1>, <line2>, '<args>')
function! s:Dec2hex(line1, line2, arg) range
  if empty(a:arg)
    if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
      let cmd = 's/\%V\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
    else
      let cmd = 's/\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
    endif
    try
      execute a:line1 . ',' . a:line2 . cmd
    catch
      echo 'Error: No decimal number found'
    endtry
  else
    echo printf('%x', a:arg + 0)
  endif
endfunction

command! -nargs=? -range Hex2dec call s:Hex2dec(<line1>, <line2>, '<args>')
function! s:Hex2dec(line1, line2, arg) range
  if empty(a:arg)
    if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
      let cmd = 's/\%V0x\x\+/\=submatch(0)+0/g'
    else
      let cmd = 's/0x\x\+/\=submatch(0)+0/g'
    endif
    try
      execute a:line1 . ',' . a:line2 . cmd
    catch
      echo 'Error: No hex number starting "0x" found'
    endtry
  else
    echo (a:arg =~? '^0x') ? a:arg + 0 : ('0x'.a:arg) + 0
  endif
endfunction

" Type `gb` to go to the BUILD file for this file.
function! GoToBuild()
python3 << EOF
import vim 
import os.path

try:
  fn = vim.current.buffer.name
  tokens = fn.split('/')
  basename = tokens[-1]
  buildfile = None
  for i in range(len(tokens)-1, 0, -1):
    buildfile = '/'.join(tokens[:i]) + '/BUILD'
    if os.path.isfile(buildfile):
      break
  if buildfile:
    print("found!!!",buildfile)
    vim.command('edit ' + buildfile)
    vim.command('call search("\\"' + basename + '\\"")')
except Exception as e:
   print("Something went wrong: " + str(e))
EOF
endfunction

nnoremap gb :call GoToBuild()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetype detection
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on          " Recognize syntax by file extension.
filetype indent on   " Check for indent file.
filetype plugin on   " Allow plugins to be loaded by file type.

" diff mode
if &diff
  set diffopt+=iwhite
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Normal mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make y behave like all other capitals (yank to end of line).

nnoremap Y y$

nnoremap <silent> <Leader>J :res +5<CR>
nnoremap <silent> <Leader>K :res -5<CR>
nnoremap <silent> <Leader>L :vertical res +15<CR>
nnoremap <silent> <Leader>H :vertical res -15<CR>
nnoremap <silent> <Leader>j :res +1<CR>
nnoremap <silent> <Leader>k :res -1<CR>
nnoremap <silent> <Leader>l :vertical res +1<CR>
nnoremap <silent> <Leader>h :vertical res -1<CR>

" Use C-hjkl in to change windows.
nnoremap <C-J> :res +1<CR>
nnoremap <C-K> :res -1<CR>
nnoremap <C-L> :vertical res +1<CR>
nnoremap <C-H> :vertical res -1<CR>
nnoremap <C-h> <C-w><Left>
nnoremap <C-j> <C-w><Down>
nnoremap <C-k> <C-w><Up>
nnoremap <C-l> <C-w><Right>

" Toggles for search highlight, line numbers, paste mode, and word wrap.
nnoremap <silent> <Leader>c :TagbarToggle<CR>
"nnoremap <silent> <Leader>h :set invhlsearch<CR>
nnoremap <silent> <Leader>n :set invnumber<CR>
nnoremap <silent> <Leader>p :set invpaste<CR>
nnoremap <silent> <Leader>w :set invwrap<CR>

" Format function
nnoremap <silent> <leader><Space> :Autoformat<CR>
"au BufWrite * :Autoformat

" Toggle NERDTree.
nnoremap <silent> <Leader>T :NERDTreeToggle<CR>

" Disable removal of leading whitespace when commenting
" inoremap # X<BS>#

" Insert mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Smash Esc.
inoremap kj <Esc>
inoremap Kj <Esc>
inoremap kJ <Esc>
inoremap KJ <Esc>

" hjkl navigation in insert mode.
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

" Better tabbing
nmap <C-Tab> a<C-t><Esc>
nmap <C-S-Tab> a<C-d><Esc>
imap <C-Tab> <C-t>
imap <C-S-Tab> <C-d>

" Visual mode
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent                   " Turn on ctrl-t and ctrl-d for indenting
set autowrite                    " Write before executing the 'make' command.
set backspace=indent,eol,start   " Allow <BS> to go over indents, eol, and start of insert.
set cindent                      " Stricter rules for C files
set colorcolumn=80               " Highlight the 80th column.
set conceallevel=0               " Don't hide quites from JSON files
set cpoptions+=$                 " Show dollar sign at end of text to be changed.
set cursorline                   " Highlight current line.
set dictionary+=~/.vim/dictionary/english-freq
set encoding=utf-8               " Set encoding to utf-8.
set expandtab                    " Expand tabs with spaces.
set fileencoding=utf-8           " Set fileencoding to utf-8.
set foldcolumn=1                 " Add <n> columns to show fold levels and boundaries.
set foldmethod=indent            " Set fold method (manual,indent,expr,syntax,diff,marker).
set hidden                       " Use hidden buffers so unsaved buffers can go to the background.
set history=500                  " Set number of lines for vim to remember.
set hlsearch                     " Highlight all search matches.
set ignorecase                   " Ignore case in regular expressions.
set incsearch                    " Immediately highlight search matches.
set laststatus=2                 " Show status line even where there is only one window.
set lazyredraw                   " Redraw faster.
set linespace=0                  " Adjust relative line height.
set list                        " Enable listchars for undesireable whitespace and non-visible wrapped text.
set listchars=tab:➤-,trail:·,extends:»,precedes:«
set mouse-=a
set modeline                     " Check for a modeline.
set nocompatible                 " No compatibility with vi.
set nofoldenable                 " Do not open file folded.
set nowrap                       " Do not open file wrapped.
set noerrorbells                 " No beeps on errors.
set noswapfile                   " Don't use swap files.
set number                       " Display line numbers.
set relativenumber               " Use relative line numbering
set scrolloff=5                  " Keep min of 'n' lines above/below cursor.
set shellslash                   " Use forward slashes regardless of OS.
set shiftwidth=4                 " >> and << shift 4 spaces.
set showcmd                      " Show partial commands in the status line.
set showmatch                    " Show matching () {} etc..
set showmode                     " Show current mode.
set sidescrolloff=10             " Keep min of 'n' columns right/left cursor.
set smartcase                    " Searches are case-sensitive if caps used.
set smarttab                     " Tabs and backspaces at the start of a line indent the line one level.
set smartindent                  " Maintains most indentation and adds extra level when nesting.
set softtabstop=4                " See spaces as tabs.
set splitright splitbelow        " Open splits below and to the right.
set synmaxcol=2000               " Only matches syntax on first 'n' columns of each line.
set tabstop=4                    " <Tab> move four characters.
set ttyfast                      " Smoother redrawing.
set textwidth=80                 " Hard wrap at 'n' characters.
set viminfo='20,\"500,%          " Adjust viminfo contents.
"set virtualedit=block            " Allow the cursor to go where it should not.
silent! set wildignorecase       " Tab completion is case-insensitive.
set wildmenu                     " Tab completion navigable menu is enabled.
set wildmode=list:longest,full   " Tab completion lists matches, then opens wildmenu on next <Tab>.
set wrapscan                     " Searching wraps to start of file when end is reached.


" Completion settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Options:
"     .        scan the current buffer ('wrapscan' is ignored)
"     w        scan buffers from other windows
"     b        scan other loaded buffers that are in the buffer list
"     u        scan the unloaded buffers that are in the buffer list
"     U        scan the buffers that are not in the buffer list
"     k        scan the files given with the 'dictionary' option
"     kspell   use the currently active spell checking |spell|
"     k{dict}  scan the file {dict}
"     s        scan the files given with the 'thesaurus' option
"     s{tsr}   scan the file {tsr}
"     i        scan current and included files
"     d        scan current and included files for defined name or macro |i_CTRL-X_CTRL-D|
"     t        tag completion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set complete=.,w,b,u,t,i

" Enable dictionary completion and spell mode for prose files.
set dictionary=/usr/share/dict/words
augroup ProseCompletion
  autocmd!
  autocmd FileType markdown,gitcommit,text setlocal complete+=k spell
augroup END


" Text formatting settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Options:
"     t  Auto-wrap text using textwidth. (default)
"     c  Auto-wrap comments; insert comment leader. (default)
"     q  Allow formatting of comments with "gq". (default)
"     r  Insert comment leader after hitting <Enter>.
"     o  Insert comment leader after hitting 'o' or 'O' in command mode.
"     n  Auto-format lists, wrapping to text *after* the list bullet char.
"     l  Don't auto-wrap if a line is already longer than textwidth.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set formatoptions=tcqronl

"highlight LineNr cterm=NONE ctermfg=Grey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetype specific overrides
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd Filetype * if &ft=="opensscad"|set smartindent!|endif
